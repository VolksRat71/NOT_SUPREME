{"version":3,"file":"static/webpack/static\\development\\pages\\permissions.js.ee963d73e4c8f70e2718.hot-update.js","sources":["webpack:///./components/Permissions.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Query } from 'react-apollo';\r\nimport Error from './ErrorMessage';\r\nimport gql from 'graphql-tag';\r\nimport Table from './styles/Table';\r\nimport SickButton from './styles/SickButton';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst possiblePermissions = [\r\n    'ADMIN',\r\n    'USER',\r\n    'ITEMCREATE',\r\n    'ITEMUPDATE',\r\n    'ITEMDELETE',\r\n    'PERMISSIONUPDATE'\r\n];\r\n\r\nconst ALL_USERS_QUERY = gql`\r\n    query {\r\n        users {\r\n            id\r\n            name\r\n            email\r\n            permissions\r\n        }\r\n    }\r\n`;\r\n\r\nconst Permissions = props => (\r\n    <Query query={ALL_USERS_QUERY}>\r\n        {({ data, loading, error }) => (\r\n            <>\r\n                <Error error={error} />\r\n                <>\r\n                    <h1>Manage Permissions</h1>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>NAME</th>\r\n                                <th>EMAIL</th>\r\n                                {possiblePermissions.map(permission => {\r\n                                    return <th key={permission}>{permission}</th>\r\n                                })}\r\n                                <th>UPDATE PERMISSION</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.users.map(user => {\r\n                                return <UserPermissions key={user.id} user={user} />\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            </>\r\n        )}\r\n    </Query>\r\n);\r\n\r\nclass UserPermissions extends React.Component {\r\n    static propTypes = {\r\n        user: PropTypes.shape({\r\n            name: PropTypes.string,\r\n            email: PropTypes.string,\r\n            id: PropTypes.string,\r\n            permissions: PropTypes.array\r\n        }).isRequired\r\n    }\r\n\r\n    state = {\r\n        permissions: this.props.user.permissions\r\n    }\r\n\r\n    handlePermissionChange = e => {\r\n        const checkbox = e.target;\r\n        // take a copy of current permissions\r\n        let updatedPermissions = [...this.state.permissions];\r\n        if (checkbox.checked) {\r\n            updatedPermissions.push(checkbox.value)\r\n        } else {\r\n            updatedPermissions = updatedPermissions.filter(permission => {\r\n                permission !== checkbox.value\r\n            })\r\n        }\r\n        this.setState({ permissions: updatedPermissions })\r\n    }\r\n\r\n    render() {\r\n        const user = this.props.user\r\n        return (\r\n            <tr>\r\n                <td>{user.name}</td>\r\n                <td>{user.email}</td>\r\n                {possiblePermissions.map(permission => {\r\n                    return (\r\n                        <td key={permission}>\r\n                            <label\r\n                                htmlFor={`${user.id}-permission=${permission}`}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.permissions.includes(permission)}\r\n                                    value={permission}\r\n                                    onChange={this.handlePermissionChange} />\r\n                            </label>\r\n                        </td>\r\n                    )\r\n                })}\r\n                <td>\r\n                    <SickButton>Update</SickButton>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Permissions;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnBA;AAFA;AACA;AA6BA;;;;;;;;;;;;;;;;;;AAUA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArDA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAsDA;;;;A","sourceRoot":""}